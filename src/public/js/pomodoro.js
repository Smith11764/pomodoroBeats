/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/pomodoro.js":
/*!**********************************!*\
  !*** ./resources/js/pomodoro.js ***!
  \**********************************/
/***/ (() => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == _typeof(value) && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator[\"return\"] && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, \"catch\": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\ndocument.addEventListener(\"DOMContentLoaded\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n  var timerElement, startPauseButton, resetButton, progressBar, textareaField, addTaskButton, todoTask, doneTask, WORK_DURATION, SHORT_BREAK_DURATION, LONG_BREAK_DURATION, workingComment, breakingComment, longbreakingComment, timeLeft, rapperComment, timerState, completedSets, timerRunning, timerId, updateTimerDisplay, formatTime, updateRapperComment, resetTimer, updateProgressBar, incrementStars, resetStars, incrementPomodoroCount, getTasksFromServer, _getTasksFromServer, renderInitialTasks, _renderInitialTasks, createMoveButtons, initializeTaskListeners, createDeleteButton, createTaskElement;\n  return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n    while (1) switch (_context3.prev = _context3.next) {\n      case 0:\n        createTaskElement = function _createTaskElement(taskText) {\n          var taskContainer = document.createElement(\"div\");\n          taskContainer.className = \"task-container\";\n          // taskContainer.setAttribute(\"data-task-id\", taskId);\n\n          var newTaskLabel = document.createElement(\"label\");\n          newTaskLabel.className = \"task-label\";\n          var newTaskCheckbox = document.createElement(\"input\");\n          newTaskCheckbox.type = \"checkbox\";\n          newTaskCheckbox.className = \"nes-checkbox is-dark\";\n\n          // チェックボックスがチェックされたとき\n          newTaskCheckbox.addEventListener(\"change\", function () {\n            if (this.checked) {\n              doneTask.appendChild(taskContainer);\n            } else {\n              todoTask.appendChild(taskContainer);\n            }\n          });\n          var newTaskSpan = document.createElement(\"span\");\n          newTaskSpan.textContent = taskText;\n          var deleteButton = createDeleteButton(taskContainer);\n          var moveButtons = createMoveButtons(taskContainer);\n          newTaskLabel.appendChild(newTaskCheckbox);\n          newTaskLabel.appendChild(newTaskSpan);\n          taskContainer.appendChild(moveButtons.moveUpButton);\n          taskContainer.appendChild(moveButtons.moveDownButton);\n          taskContainer.appendChild(newTaskLabel);\n          taskContainer.appendChild(deleteButton);\n          return taskContainer;\n        };\n        createDeleteButton = function _createDeleteButton(taskContainer) {\n          var deleteButton = document.createElement(\"img\");\n          var appElement = document.getElementById(\"todo_section\");\n          var deleteImageSrc = appElement.getAttribute(\"data-delete-image\");\n          deleteButton.src = deleteImageSrc;\n          deleteButton.className = \"delete-button\";\n          deleteButton.addEventListener(\"click\", function () {\n            taskContainer.remove(); // taskContainerを削除\n          });\n\n          return deleteButton;\n        };\n        initializeTaskListeners = function _initializeTaskListen() {\n          var taskContainers = document.querySelectorAll('.task-container');\n          taskContainers.forEach(function (taskContainer) {\n            var moveButtons = taskContainer.querySelectorAll('.move-button');\n\n            // todo:↓の判定がないと、moveButtonsが存在しない場合にエラーが発生する\n            // なぜ、存在しない場合が存在するかは不明なので後で調査(必要なタスクは表示されるので機能には問題ないと判断)\n            // console.log(moveButtons);\n            if (moveButtons.length > 0) {\n              var moveUpButton = moveButtons[0];\n              var moveDownButton = moveButtons[1];\n              var deleteButton = taskContainer.querySelector('.delete-button');\n              var taskCheckbox = taskContainer.querySelector('input[type=\"checkbox\"].nes-checkbox');\n              moveUpButton.addEventListener('click', function () {\n                var previousSibling = taskContainer.previousElementSibling;\n                if (previousSibling && previousSibling.className !== 'title') {\n                  taskContainer.parentElement.insertBefore(taskContainer, previousSibling);\n                }\n              });\n              moveDownButton.addEventListener('click', function () {\n                var nextSibling = taskContainer.nextElementSibling;\n                if (nextSibling) {\n                  taskContainer.parentElement.insertBefore(nextSibling, taskContainer);\n                }\n              });\n              deleteButton.addEventListener('click', function () {\n                taskContainer.remove();\n              });\n              taskCheckbox.addEventListener('change', function () {\n                if (this.checked) {\n                  doneTask.appendChild(taskContainer);\n                } else {\n                  todoTask.appendChild(taskContainer);\n                }\n              });\n            } else {\n              console.error('Move buttons not found');\n              return;\n            }\n          });\n        };\n        createMoveButtons = function _createMoveButtons(taskContainer) {\n          var moveUpButton = document.createElement(\"img\");\n          var moveDownButton = document.createElement(\"img\");\n          var appElement = document.getElementById(\"todo_section\");\n          var upImageSrc = appElement.getAttribute(\"data-up-image\");\n          var downImageSrc = appElement.getAttribute(\"data-down-image\");\n          moveUpButton.src = upImageSrc;\n          moveDownButton.src = downImageSrc;\n          moveUpButton.className = \"move-button\";\n          moveDownButton.className = \"move-button\";\n          moveUpButton.addEventListener(\"click\", function () {\n            var previousSibling = taskContainer.previousElementSibling;\n            if (previousSibling && previousSibling.className !== \"title\") {\n              taskContainer.parentElement.insertBefore(taskContainer, previousSibling);\n            }\n          });\n          moveDownButton.addEventListener(\"click\", function () {\n            var nextSibling = taskContainer.nextElementSibling;\n            if (nextSibling) {\n              taskContainer.parentElement.insertBefore(nextSibling, taskContainer);\n            }\n          });\n          return {\n            moveUpButton: moveUpButton,\n            moveDownButton: moveDownButton\n          };\n        };\n        _renderInitialTasks = function _renderInitialTasks3() {\n          _renderInitialTasks = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n            var tasks;\n            return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n              while (1) switch (_context2.prev = _context2.next) {\n                case 0:\n                  _context2.prev = 0;\n                  _context2.next = 3;\n                  return getTasksFromServer();\n                case 3:\n                  tasks = _context2.sent;\n                  tasks.forEach(function (task) {\n                    var taskElement = createTaskElement(task.task);\n                    if (task.is_done) {\n                      doneTask.appendChild(taskElement);\n                    } else {\n                      todoTask.appendChild(taskElement);\n                    }\n                  });\n                  _context2.next = 11;\n                  break;\n                case 7:\n                  _context2.prev = 7;\n                  _context2.t0 = _context2[\"catch\"](0);\n                  console.error(\"Error fetching tasks:\", _context2.t0);\n                  alert(\"Error fetching tasks from server. Please try again.\");\n                case 11:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }, _callee2, null, [[0, 7]]);\n          }));\n          return _renderInitialTasks.apply(this, arguments);\n        };\n        renderInitialTasks = function _renderInitialTasks2() {\n          return _renderInitialTasks.apply(this, arguments);\n        };\n        _getTasksFromServer = function _getTasksFromServer3() {\n          _getTasksFromServer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n            var response, tasks;\n            return _regeneratorRuntime().wrap(function _callee$(_context) {\n              while (1) switch (_context.prev = _context.next) {\n                case 0:\n                  _context.next = 2;\n                  return fetch(\"/api/tasks/user\", {\n                    credentials: 'same-origin'\n                  });\n                case 2:\n                  response = _context.sent;\n                  if (response.ok) {\n                    _context.next = 5;\n                    break;\n                  }\n                  throw new Error(\"Error fetching tasks\");\n                case 5:\n                  _context.next = 7;\n                  return response.json();\n                case 7:\n                  tasks = _context.sent;\n                  return _context.abrupt(\"return\", tasks);\n                case 9:\n                case \"end\":\n                  return _context.stop();\n              }\n            }, _callee);\n          }));\n          return _getTasksFromServer.apply(this, arguments);\n        };\n        getTasksFromServer = function _getTasksFromServer2() {\n          return _getTasksFromServer.apply(this, arguments);\n        };\n        incrementPomodoroCount = function _incrementPomodoroCou() {\n          var pomodoroCountElement = document.getElementById('pomodoro_count');\n          var currentCount = parseInt(pomodoroCountElement.textContent.split(':')[1]);\n          pomodoroCountElement.textContent = \"count:\".concat(currentCount + 1);\n        };\n        resetStars = function _resetStars() {\n          var filledStars = document.querySelectorAll('.nes-icon.star:not(.is-empty)');\n          filledStars.forEach(function (star) {\n            star.classList.add('is-empty');\n          });\n        };\n        incrementStars = function _incrementStars() {\n          var emptyStar = document.querySelector('.nes-icon.star.is-empty');\n          if (emptyStar) {\n            emptyStar.classList.remove('is-empty');\n          }\n        };\n        updateProgressBar = function _updateProgressBar() {\n          var percentage = Math.round(timeLeft / 1500 * 100);\n          if (percentage < 50 && percentage > 30) {\n            progressBar.classList.remove('is-primary');\n            progressBar.classList.add('is-success');\n          } else if (percentage <= 30 && percentage >= 10) {\n            progressBar.classList.remove('is-success');\n            progressBar.classList.add('is-warning');\n          } else if (percentage < 10) {\n            progressBar.classList.remove('is-warning');\n            progressBar.classList.add('is-error');\n          }\n          progressBar.value = percentage;\n        };\n        resetTimer = function _resetTimer() {\n          if (timerState === 'work') {\n            timeLeft = WORK_DURATION;\n            rapperComment = workingComment;\n          } else if (timerState === 'short_break') {\n            timeLeft = SHORT_BREAK_DURATION;\n            rapperComment = breakingComment;\n          } else if (timerState === 'long_break') {\n            timeLeft = LONG_BREAK_DURATION;\n            rapperComment = longbreakingComment;\n          }\n          updateTimerDisplay();\n          updateProgressBar();\n        };\n        updateRapperComment = function _updateRapperComment() {\n          var rapperCommentElement = document.getElementById('rapper_comment');\n          rapperCommentElement.textContent = rapperComment;\n        };\n        formatTime = function _formatTime(seconds) {\n          var minutes = Math.floor(seconds / 60);\n          var remainingSeconds = seconds % 60;\n          return \"\".concat(minutes.toString().padStart(2, '0'), \":\").concat(remainingSeconds.toString().padStart(2, '0'));\n        };\n        updateTimerDisplay = function _updateTimerDisplay() {\n          var displayTime = formatTime(timeLeft);\n          timerElement.textContent = displayTime;\n          document.title = displayTime;\n        };\n        timerElement = document.getElementById('timer');\n        startPauseButton = document.getElementById('start-pause');\n        resetButton = document.getElementById('reset');\n        progressBar = document.getElementById('progress_bar');\n        textareaField = document.getElementById(\"textarea_field\");\n        addTaskButton = document.getElementById(\"add_task_button\");\n        todoTask = document.getElementById(\"todo_task\");\n        doneTask = document.getElementById(\"done_task\"); // const WORK_DURATION = 1500; // 25分を秒単位で表したもの\n        WORK_DURATION = 5; // test\n        // const SHORT_BREAK_DURATION = 300; // 5分を秒単位で表したもの\n        SHORT_BREAK_DURATION = 3; // test\n        // const LONG_BREAK_DURATION = 1500; // 25分を秒単位で表したもの\n        LONG_BREAK_DURATION = 10; // test\n        workingComment = 'just do it';\n        breakingComment = 'just chill';\n        longbreakingComment = 'relaaax!';\n        timeLeft = WORK_DURATION;\n        rapperComment = workingComment;\n        timerState = 'work';\n        completedSets = 0;\n        timerRunning = false;\n        timerElement.textContent = formatTime(timeLeft);\n        startPauseButton.addEventListener('click', function () {\n          if (timerRunning) {\n            clearInterval(timerId);\n            timerRunning = false;\n            startPauseButton.textContent = 'START!!!';\n          } else {\n            timerRunning = true;\n            startPauseButton.textContent = 'PAUSE';\n            updateRapperComment();\n            timerId = setInterval(function () {\n              timeLeft--;\n              updateTimerDisplay();\n              updateProgressBar();\n              if (timeLeft === 0) {\n                if (timerState === 'work') {\n                  completedSets++;\n                  incrementStars();\n                  if (completedSets === 4) {\n                    timerState = 'long_break';\n                    completedSets = 0;\n                  } else {\n                    timerState = 'short_break';\n                  }\n                } else if (timerState === 'long_break') {\n                  incrementPomodoroCount();\n                  resetStars();\n                  timerState = 'work';\n                } else {\n                  timerState = 'work';\n                }\n                clearInterval(timerId);\n                timerRunning = false;\n                startPauseButton.textContent = 'START!!!';\n                resetTimer();\n                updateRapperComment();\n              }\n            }, 1000);\n          }\n        });\n        resetButton.addEventListener('click', function () {\n          if (!timerRunning) {\n            resetTimer();\n          }\n        });\n\n        // タスク管理\n\n        addTaskButton.addEventListener(\"click\", function () {\n          var taskText = textareaField.value.trim();\n          if (taskText === \"\") {\n            alert(\"Please enter a task.\");\n            return;\n          }\n          var taskElement = createTaskElement(taskText);\n          todoTask.appendChild(taskElement);\n          textareaField.value = \"\";\n        });\n\n        // 初期表示\n        updateTimerDisplay();\n        updateProgressBar();\n        initializeTaskListeners();\n\n        // 初期表示のタスクをレンダリング\n        _context3.next = 44;\n        return renderInitialTasks();\n      case 44:\n      case \"end\":\n        return _context3.stop();\n    }\n  }, _callee3);\n})));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/pomodoro.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/pomodoro.js"]();
/******/ 	
/******/ })()
;